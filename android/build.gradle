apply plugin: "com.android.application"

configurations { natives }

dependencies {
    implementation project(":core")
    implementation project(":linguaj:linguaj")
    implementation "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-arm64-v8a"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86_64"
}

android {
    Properties versionProps = new Properties()
    versionProps.load(new FileInputStream(file('../version.properties')))

    // Must match ci/install-android-sdk
    compileSdkVersion 34
    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 34
        versionCode versionProps['VERSION_CODE'].toInteger()
        versionName versionProps['VERSION']
    }

    flavorDimensions 'store'
    productFlavors {
        agc {
            dimension 'store'
        }
        amz {
            dimension 'store'
        }
        gp {
            dimension 'store'
        }
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src/main']
            aidl.srcDirs = ['src/main']
            renderscript.srcDirs = ['src/main']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['libs']
        }
        agc {
            java.srcDirs = ['src/agc']
        }
        amz {
            java.srcDirs = ['src/amz']
        }
        gp {
            java.srcDirs = ['src/gp']
        }
    }
    signingConfigs {
        release {
            if (project.file('signing.gradle').exists()) {
                apply from: 'signing.gradle', to: release
            } else if (System.getenv("KEYSTORE_BASE64") != null) {
                storeFile decodeKeyStoreFileFromBase64Env('KEYSTORE_BASE64')
                storePassword System.getenv('KEYSTORE_PASSWORD')
                keyAlias System.getenv('KEYSTORE_KEY_ALIAS')
                keyPassword System.getenv('KEYSTORE_KEY_PASSWORD')
            }
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }
    packagingOptions {
        resources {
            excludes += ['LICENSE.txt']
        }
    }
}

// called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
task copyAndroidNatives() {
    file("libs/armeabi-v7a/").mkdirs()
    file("libs/x86/").mkdirs()
    file("libs/arm64-v8a/").mkdirs()
    file("libs/x86_64/").mkdirs()

    configurations.natives.files.each { jar ->
        def outputDir = null
        if (jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
        if (jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
        if (jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
        if (jar.name.endsWith("natives-x86_64.jar")) outputDir = file("libs/x86_64")
        if (outputDir != null) {
            copy {
                from zipTree(jar)
                into outputDir
                include "*.so"
            }
        }
    }
}

task run(type: Exec) {
    def path
    def localProperties = project.file("../local.properties")
    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream { instr ->
            properties.load(instr)
        }
        def sdkDir = properties.getProperty('sdk.dir')
        if (sdkDir) {
            path = sdkDir
        } else {
            path = "$System.env.ANDROID_HOME"
        }
    } else {
        path = "$System.env.ANDROID_HOME"
    }

    def adb = path + "/platform-tools/adb"
    commandLine "$adb", 'shell', 'am', 'start', '-n', 'com.agateau.burgerparty/com.agateau.burgerparty.MainActivity'
}

// Thanks to https://gist.github.com/mariotaku/7a0c51955d14def2fa0e#file-signing-gradle-L82
static def decodeKeyStoreFileFromBase64Env(String name) {
    String keyStoreBase64 = System.getenv(name)
    if (keyStoreBase64 == null) {
        return null
    }
    File tempKeyStoreFile = File.createTempFile("tmp_ks_", ".jks", File.createTempDir())
    FileOutputStream fos = null
    try {
        fos = new FileOutputStream(tempKeyStoreFile)
        fos.write(keyStoreBase64.decodeBase64())
        fos.flush()
    } finally {
        if (fos != null) {
            fos.close()
        }
    }
    return tempKeyStoreFile
}
